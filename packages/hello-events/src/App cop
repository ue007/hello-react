import * as React from "react";
import { useRef } from "react";
import { hot } from "react-hot-loader/root";

interface Props {
	name?: string;
}

class App extends React.Component<Props> {
	buttonRef = useRef<any>();

	/**
	 * component mount
	 */
	componentDidMount() {
		this.buttonRef.current.addEventListener("click", (e: unknown) => {
			console.log(e);
		});
	}

	/**
	 * component unmount
	 */
	componentWillUnmount() {
		this.buttonRef.current.removeEventListener("click");
	}

	/**
	 * handle click event
	 */
	private handleClick = (e: unknown) => {
		console.log(this);
		console.log(e);
	};

	render() {
		const { name } = this.props;
		return (
			<>
				<h1>Hello {name}</h1>
				<button onClick={this.handleClick}>
					Button: Test React Event
				</button>
				<button ref={this.buttonRef}>Button: Test Origin Event</button>
			</>
		);
	}
}

export default hot(App);
